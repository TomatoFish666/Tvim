# Ch00_05

---

---

## ch00_Prerequisites

- Vim version >= 7.3

- be familiar with Vim

- have programming experience

### Creating a Vimrc File

- A ~/.vimrc file contains Vimscript code, it is created by yourself.

- When you open Vim, it will run the code in ~/.vimrc automatically.

- You can run `:echo $MYVIMRC` in vim to find your ～/vimrc      

---

## ch01_Echoing_Messages

### echo and echom commands

echo:                                           

- run `:help echo` in vim 
- The output will disappear by the time your script is done.

echom:                                      

- run `:help echom` in vim
- It will save your output, and you can use :messages to review it.

### Comments

- // in C , # in bash , " in Vimscript

---

## ch02_Setting_Options

### Boolean Options

- Command: `:set number & :set nonumber`
- Command: `:set <name> & :set no<name>`

### Toggling Boolean Options

- Command: `:set <name> & :set <name>!`
- set the option to the opposite

### Checking Options

- Command: `:set <name>?`
- Ask Vim what an option is currently set to?

### Options with Values

- Command: `:set <name>=<value>` ---> to set
- Command: `:set <name>?` ---> to check

### Setting Multiple Options at Once

- ......

---

## ch03_Basic_Mapping

- In Normal Mode

### Example

- Command: `:map - x`
- Command: `:map - dd`

### Special Characters

- Command: `:map <space> viw`
- Command: `:map <c-d> dd`

### Commenting

- Don't use comments after mapping keys

### Exercise

- Command: `:map - dp`

---

## ch04_Modal_Mapping

- Map command which made the keys work in Normal Mode, as well as Visual Mode.            

- You can be more specific about when you want mappings to apply by using nmap,vmap and imap.     

- nmap,vmap and imap tell Vim to only use the mapping in normal,visual, or insert mode respectively.

### Example

- Command: `:nmap \ dd` ---> It will only take effect in normal mode
- Command: `:vmap \ U` ---> It will only take effect in visual mode

### Muscle Memory

- At first the idea of mapping the same key to do different things depending on which mode you're in may sound like a terrible idea.

- In practice it turns out that this isn't really a problem.

- Your fingers and brain will learn your mappings and the keys themselves will become subconscious.

### Insert Mode

- run `:imap <c-d> dd` , and press Ctrl+d in insert mode, it will just put two ds in your file.
    - the command means that when I press <c-d> I want you to do what pressing d and d would normally do.
    
- run `:imap <c-d> <esc>dd` , and try again
    - the `<esc>` is our way of telling Vim to press the Escape key
    
---

## ch05_Strict_Mapping

- run `:nmap - dd`
- remove mappings by running `:nunmap -`
    - nmap ---> nunmap
    - imap ---> iunmap
    - vmap ---> vunmap

### Recursion（循环）

- run `:map dd O<esc>jddk`
    - clear the current line???
    - acturally, there will be a ton of empty lines!
    - because the mapping is recursive!

### Side Effects

- recursion

- it can change if you install a plugin that maps keys they depend on

### Nonrecursive Mapping

```vimscript
run the commands:

:nmap x dd
:nnoremap \ x

when you press \ , it will delete the current character,not current line
```

- each of the `*map` commands has a `*noremap` counterpart that ignores other mappings: noremap,nnoremap,vnoremap,inoremap

- Always use these nonrecursive variants instead of their normal counterparts